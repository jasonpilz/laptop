#!/bin/bash

# red=$'\e[0;31m'
yel=$'\e[0;33m'
cyn=$'\e[0;36m'
end=$'\e[0m'

# Helpers
# -----------------------------------------------------------------------------
print_header() {
  printf "%s\\n\\n===> %s \\n%s" "$cyn" "$1" "$end"
}

print_warn() {
  printf "%sWarn: $1%s\\n" "$yel" "$end"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\\n%s\\n" "$text" >> "$file"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap -1 | grep -Fqx "$1"
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    print_header "Updating $1"
    gem update "$@"
  else
    print_header "Installing $1"
    gem install "$@"
  fi
}

# Dirs
# -----------------------------------------------------------------------------
mkdir -p {"$HOME/code","$HOME/code_support"}

# Homebrew
# -----------------------------------------------------------------------------
if ! command -v brew >/dev/null
then
  print_header "Installing Homebrew"
    curl -fsSL \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
else
  print_warn "Homebrew already installed. Skipping"
fi

# https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'
then
  print_header "Removing legacy brew-cask since its now part of caskroom/cask"
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'
then
  brew untap caskroom/versions
fi

# print_header "Updating Homebrew ..."
# cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

print_header "Verifying the Homebrew installation"
if brew doctor
then
  print_header "Your Homebrew installation is good to go"
else
  print_warn "Your Homebrew installation reported some errors or warnings"
fi

print_header "Installing formulas and casks from the Brewfile"
# https://github.com/Homebrew/brew/issues/1151
brew update --force
if brew bundle --file="$HOME/Brewfile"
then
  print_header "All formulas and casks were installed successfully"
else
  print_warn "Some formulas or casks failed to install"
fi

print_header "Cleaning up old Homebrew formulae"
brew cleanup
brew cask cleanup

# Xcode
# -----------------------------------------------------------------------------
if xcode-select --install
then
  print_header "Installed xcode commandline tools"
else
  print_warn "Xcode commandline tools already installed. Skipping"
fi

# ASDF
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/.asdf" ]
then
  print_header "Configuring asdf version manager"
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.1

  # shellcheck disable=SC1090
  source "$HOME/.asdf/asdf.sh"
else
  print_warn "ASDF already installed. Skipping"
fi


install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local latest_available
  latest_available="$(asdf list-all "$language" | grep -v '[A-Za-z-]' | tail -1)"
  local version="${2:-$latest_available}"

  if ! asdf list "$language" | grep -Fq "$version"
  then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  else
    print_warn "Version $version already installed"
  fi
}

install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_plugin "erlang" "https://github.com/asdf-vm/asdf-erlang.git"
install_asdf_plugin "elixir" "https://github.com/asdf-vm/asdf-elixir.git"
install_asdf_plugin "python" "https://github.com/tuvistavie/asdf-python.git"
install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang.git"

print_header "Installing Ruby"
install_asdf_language "ruby"

print_header "Installing Node"
# Import the Node.js release team's OpenPGP keys to main keyring:
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

print_header "Installing Erlang"
install_asdf_language "erlang" "20.0"

print_header "Installing Elixir"
install_asdf_language "elixir"

print_header "Installing Python"
install_asdf_language "python"

print_header "Installing Golang"
install_asdf_language "golang"

# Rubygems and Bundler
# -----------------------------------------------------------------------------
print_header "Updating Rubygems"
gem update --system
print_header "Installing Bundler"
gem_install_or_update "bundler"

print_header "Bundle config jobs"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Powerline fonts
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/code_support/fonts" ]
then
  print_header "Installing Powerline Fonts"
  git clone https://github.com/powerline/fonts.git --depth=1 "$HOME/code_support/fonts"

  ~/code_support/fonts/install.sh
else
  print_warn "Powerline Fonts already installed"
fi

# Oh-my-zsh
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/.oh-my-zsh" ]
then
  print_header "Installing Oh-my-zsh"
  cd || true
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
else
  print_warn "Oh-my-Zsh already installed"
fi

# Dotfiles
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/code_support/dotfiles" ]
then
  print_header "Installing dotfiles"
  git clone https://github.com/jasonpilz/dotfiles.git "$HOME/code_support/dotfiles"
  passive=(
    agignore
    aliases
    gitignore_global
    gvimrc
    htoprc
    hyper.js
    iex.exs
    pryrc
    rspec
    tmux.conf
    vimrc
  )

  force=(
    zshrc
  )

  for dotfile in "${passive[@]}"; do
    ln -s "$HOME/code_support/dotfiles/$dotfile" "$HOME/.$dotfile"
  done
  for dotfile in "${force[@]}"; do
    ln -sf "$HOME/code_support/dotfiles/$dotfile" "$HOME/.$dotfile"
  done
else
  print_warn "Dotfiles already installed"
fi

# Vundle and install plugins
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/.vim/bundle/Vundle.vim" ]
then
  print_header "Installing Vundle"
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

  print_header "Installing Vim plugins"
  vim +PluginInstall +qall
else
  print_warn "Vundle already installed"
fi

# Support split DNS with openconnect
# -----------------------------------------------------------------------------
if [ ! -f /usr/local/etc/vpnc-script.bak ]
then
  print_header "Configuring split DNS for openconnect"
  mv /usr/local/etc/vpnc-script /usr/local/etc/vpnc-script.bak
  curl "https://raw.githubusercontent.com/batmanppc/vpnc-scripts/43e21edbf1683804f08364cef7269ed7bc81687c/vpnc-script" > /usr/local/etc/vpnc-script
  chmod +x /usr/local/etc/vpnc-script
else
  print_warn "Split DNS already configured"
fi

# Customizations
# -----------------------------------------------------------------------------
if [ -f "$HOME/.laptop.local" ]; then
  print_header "Running customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
