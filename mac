#!/bin/bash

# Helpers
# -----------------------------------------------------------------------------
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC1117
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\\n%s\\n" "$text" >> "$file"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap -1 | grep -Fqx "$1"
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

# Dirs
# -----------------------------------------------------------------------------
mkdir -p {"$HOME/code","$HOME/code_support"}

# Xcode
# -----------------------------------------------------------------------------
if xcode-select --install
then
  fancy_echo "Installed xcode commandline tools."
else
  fancy_echo "xcode commandline tools already installed. Skipping ..."
fi

# Homebrew
# -----------------------------------------------------------------------------
if ! command -v brew >/dev/null
then
  fancy_echo "Installing Homebrew ..."
    curl -fsSL \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'
then
  fancy_echo "Removing legacy brew-cask since its now part of caskroom/cask ..."
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'
then
  brew untap caskroom/versions
fi

# fancy_echo "Updating Homebrew ..."
# cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor
then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."

  echo "Review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
# https://github.com/Homebrew/brew/issues/1151
brew update --force
if brew bundle --file="$HOME/Brewfile"
then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."

  echo "This is usually due to one of the Mac apps being already installed,"
  echo "in which case, you can ignore these errors."
fi

fancy_echo "Cleaning up old Homebrew formulae ..."
brew cleanup
brew cask cleanup

# ASDF
# -----------------------------------------------------------------------------
fancy_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]
then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.1
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local latest_available
  local version="${2:-$latest_available}"

  latest_available="$(asdf list-all "$language" | grep -v '[A-Za-z-]' | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"
  then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"

install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_plugin "erlang" "https://github.com/asdf-vm/asdf-erlang.git"
install_asdf_plugin "elixir" "https://github.com/asdf-vm/asdf-elixir.git"
install_asdf_plugin "python" "https://github.com/tuvistavie/asdf-python.git"
install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang.git"

fancy_echo "Installing latest Ruby..."
install_asdf_language "ruby"

fancy_echo "Installing latest Node..."
# Import the Node.js release team's OpenPGP keys to main keyring:
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

fancy_echo "Installing latest erlang..."
install_asdf_language "erlang" "20.0"

fancy_echo "Installing latest elixir..."
install_asdf_language "elixir"

fancy_echo "Installing latest python..."
install_asdf_language "python"

fancy_echo "Installing latest golang..."
install_asdf_language "golang"

# Rubygems and Bundler
# -----------------------------------------------------------------------------
gem update --system
gem_install_or_update "bundler"

number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Powerline fonts
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/code_support/fonts" ]
then
  mkdir -p "$HOME/code_support" && (cd "$_" || true)

  git clone https://github.com/powerline/fonts.git --depth=1

  ./fonts/install.sh
fi

# Dotfiles
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/code_support/dotfiles" ]
then
  cd "$HOME/code_support" || true
  git clone git@github.com:jasonpilz/dotfiles.git
  active=(
    agignore
    aliases
    gitignore_global
    gvimrc
    htoprc
    hyper.js
    iex.exs
    pryrc
    rspec
    tmux.conf
    vimrc
    zshrc
  )

  for dotfile in "${active[@]}"; do
    ln -s "$HOME/code_support/dotfiles/$dotfile" "$HOME/.$dotfile"
  done
fi

# Oh-my-zsh
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/.oh-my-zsh" ]
then
  cd || true
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

# Vundle and install plugins
# -----------------------------------------------------------------------------
if [ ! -d "$HOME/.vim/bundle/Vundle.vim" ]
then
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  vim +PluginInstall +qall
fi

# Support split DNS with openconnect
# -----------------------------------------------------------------------------
if [ ! -f /usr/local/etc/vpnc-script.bak ]
then
  mv /usr/local/etc/vpnc-script /usr/local/etc/vpnc-script.bak
  curl "https://raw.githubusercontent.com/batmanppc/vpnc-scripts/43e21edbf1683804f08364cef7269ed7bc81687c/vpnc-script" > /usr/local/etc/vpnc-script
  chmod +x /usr/local/etc/vpnc-script
fi

# Customizations
# -----------------------------------------------------------------------------
if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
